import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,e as n}from"./app-DF2Yrj6q.js";const s={},c=n(`<p>格式:</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源文件路径&gt; &lt;目标文件路径&gt;</code></li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源文件路径1&gt;&quot;,...,&quot;&lt;目标文件路径&gt;&quot;]</code></li></ul><p>和<code>RUN</code>指令一样，也有两种格式，一种类似命令行，一种类似于函数调用。</p><p><code>COPY</code>指令将从构建上下文目录中<code>&lt;源路径&gt;</code>的文件或目录复制到新的一层的镜像内的<code>&lt;目标路径&gt;</code>位置。比如:</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> package.json /usr/src/app/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;源路径&gt;</code>可以是多个文件或目录, 也可以是<code>&lt;通配符&gt;</code>, 其通配符规则要满足Go语言的<code>filepath.Match</code>规则，如：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> home* /usr/src/app/</span>
<span class="token instruction"><span class="token keyword">COPY</span> hom?.txt /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;目标路径&gt;</code>可以是容器内绝对路径，也可以是相对于工作目录（可以用WORKDIR指令指定）的相对路径。目标路径不需要事先存在，如果不存在，<code>COPY</code>指令会自动创建目录。</p><p><code>COPY</code>指令会将文件或目录的元数据复制到目标位置，比如文件权限、文件所有者、文件所有组都会保留等。</p><p>在使用该指令时还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>选项，该选项可以指定复制到镜像中的文件或目录的文件所有者和文件所有组。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">1000:1000</span></span> . /tmp/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chown</span><span class="token punctuation">=</span><span class="token string">bin</span></span> files* /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果源路径是文件夹，那么目标路径必须是目录，否则会报错。 如果源路径是文件夹，复制的时候不是直接复制文件夹，而是将文件夹中的内容复制到目标路径。</p>`,12),a=[c];function d(l,i){return t(),o("div",null,a)}const u=e(s,[["render",d],["__file","copy.html.vue"]]),g=JSON.parse('{"path":"/docker/dockfile/copy.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":1709352420000,"updatedTime":1709452959000,"contributors":[{"name":"George","email":"leiping@yunxianginvest.com","commits":1},{"name":"leiping","email":"leiping@91cyt.com","commits":1}]},"readingTime":{"minutes":1.28,"words":384},"filePathRelative":"docker/dockfile/copy.md","localizedDate":"March 2, 2024","excerpt":"<p>格式:</p>\\n<ul>\\n<li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源文件路径&gt; &lt;目标文件路径&gt;</code></li>\\n<li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [\\"&lt;源文件路径1&gt;\\",...,\\"&lt;目标文件路径&gt;\\"]</code></li>\\n</ul>\\n<p>和<code>RUN</code>指令一样，也有两种格式，一种类似命令行，一种类似于函数调用。</p>\\n<p><code>COPY</code>指令将从构建上下文目录中<code>&lt;源路径&gt;</code>的文件或目录复制到新的一层的镜像内的<code>&lt;目标路径&gt;</code>位置。比如:</p>"}');export{u as comp,g as data};
