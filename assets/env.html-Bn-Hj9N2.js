import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,e as n}from"./app-DRadftDd.js";const a={},s=n(`<p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> VERSION=1.0 DEBUG=on <span class="token operator">\\</span>
    NAME=<span class="token string">&quot;Happy Feet&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 <code>node</code> 镜像 <code>Dockerfile</code> 中，就有类似这样的代码：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> NODE_VERSION 7.2.0</span>

<span class="token instruction"><span class="token keyword">RUN</span> curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc <span class="token operator">\\</span>
  &amp;&amp; grep <span class="token string">&quot; node-v$NODE_VERSION-linux-x64.tar.xz\\$&quot;</span> SHASUMS256.txt | sha256sum -c - <span class="token operator">\\</span>
  &amp;&amp; tar -xJf <span class="token string">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> -C /usr/local --strip-components=1 <span class="token operator">\\</span>
  &amp;&amp; rm <span class="token string">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> SHASUMS256.txt.asc SHASUMS256.txt <span class="token operator">\\</span>
  &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里先定义了环境变量 <code>NODE_VERSION</code>，其后的 <code>RUN</code> 这层里，多次使用 <code>$NODE_VERSION</code> 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，<code>Dockerfile</code> 构建维护变得更轻松了。</p><p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>FROM</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>、<code>RUN</code>。</p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 <code>Dockerfile</code> 制作更多的镜像，只需使用不同的环境变量即可。</p>`,10),c=[s];function d(l,i){return t(),o("div",null,c)}const u=e(a,[["render",d],["__file","env.html.vue"]]),m=JSON.parse('{"path":"/docker/dockfile/env.html","title":"","lang":"zh-CN","frontmatter":{"description":"格式有两种： ENV <key> <value> ENV <key1>=<value1> <key2>=<value2>... 这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。 这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的...","head":[["meta",{"property":"og:url","content":"https://leiping520.github.io/docs/docker/dockfile/env.html"}],["meta",{"property":"og:site_name","content":"悟空"}],["meta",{"property":"og:description","content":"格式有两种： ENV <key> <value> ENV <key1>=<value1> <key2>=<value2>... 这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。 这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-03T08:02:39.000Z"}],["meta",{"property":"article:author","content":"George"}],["meta",{"property":"article:modified_time","content":"2024-03-03T08:02:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T08:02:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"George\\",\\"url\\":\\"https://leiping520.github.io/docs/\\"}]}"]]},"headers":[],"git":{"createdTime":1709452959000,"updatedTime":1709452959000,"contributors":[{"name":"leiping","email":"leiping@91cyt.com","commits":1}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"docker/dockfile/env.md","localizedDate":"2024年3月3日","excerpt":"<p>格式有两种：</p>\\n<ul>\\n<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>\\n<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>\\n</ul>\\n<p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>\\n<div class=\\"language-docker\\" data-ext=\\"docker\\" data-title=\\"docker\\"><pre class=\\"language-docker\\"><code><span class=\\"token instruction\\"><span class=\\"token keyword\\">ENV</span> VERSION=1.0 DEBUG=on <span class=\\"token operator\\">\\\\</span>\\n    NAME=<span class=\\"token string\\">\\"Happy Feet\\"</span></span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,m as data};
