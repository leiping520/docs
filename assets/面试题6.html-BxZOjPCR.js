import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as p}from"./app-BjcN3crD.js";const t={},e=p(`<h2 id="实现version-compare函数。" tabindex="-1"><a class="header-anchor" href="#实现version-compare函数。"><span>实现version_compare函数。</span></a></h2><ol><li>假设给你的两个版本号里面，都不为空</li><li>字符串中只包含数字和小数点.</li><li>如果a &gt;b 返回 1 b &gt; a 返回-1，其他情况返回0</li></ol><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code>  <span class="token keyword">function</span> <span class="token function-definition function">version_compare</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token punctuation">{</span>
      <span class="token variable">$v1Arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;.&#39;</span><span class="token punctuation">,</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$v2Arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;.&#39;</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$v1Arr</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$v2Arr</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$v1Arr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">count</span><span class="token punctuation">(</span><span class="token variable">$v2Arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$v1Arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token variable">$v2Arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&gt;</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","面试题6.html.vue"]]),v=JSON.parse(`{"path":"/interview/interview_qa/%E9%9D%A2%E8%AF%95%E9%A2%986.html","title":"","lang":"en-US","frontmatter":{"icon":"home","toc":true,"sidebar":false,"breadcrumb":false},"headers":[{"level":2,"title":"实现version_compare函数。","slug":"实现version-compare函数。","link":"#实现version-compare函数。","children":[]}],"git":{"createdTime":1729172701000,"updatedTime":1729172701000,"contributors":[{"name":"leiping","email":"leiping@91cyt.com","commits":1}]},"readingTime":{"minutes":0.49,"words":147},"filePathRelative":"interview/interview_qa/面试题6.md","localizedDate":"October 17, 2024","excerpt":"<h2>实现version_compare函数。</h2>\\n<ol>\\n<li>假设给你的两个版本号里面，都不为空</li>\\n<li>字符串中只包含数字和小数点.</li>\\n<li>如果a &gt;b 返回 1 b &gt; a 返回-1，其他情况返回0</li>\\n</ol>\\n<div class=\\"language-php\\" data-ext=\\"php\\" data-title=\\"php\\"><pre class=\\"language-php\\"><code>  <span class=\\"token keyword\\">function</span> <span class=\\"token function-definition function\\">version_compare</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword type-hint\\">string</span> <span class=\\"token variable\\">$v1</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword type-hint\\">string</span> <span class=\\"token variable\\">$v2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span> <span class=\\"token keyword return-type\\">int</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token variable\\">$v1Arr</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">explode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'.'</span><span class=\\"token punctuation\\">,</span><span class=\\"token variable\\">$v1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token variable\\">$v2Arr</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">explode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'.'</span><span class=\\"token punctuation\\">,</span><span class=\\"token variable\\">$v2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token variable\\">$len</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$v1Arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$v2Arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$v1Arr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token class-name return-type\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$v2Arr</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$i</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token variable\\">$i</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token variable\\">$len</span><span class=\\"token punctuation\\">;</span><span class=\\"token variable\\">$i</span><span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token variable\\">$n</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword type-casting\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$v1Arr</span><span class=\\"token punctuation\\">[</span><span class=\\"token variable\\">$i</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">??</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token variable\\">$m</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword type-casting\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$v2Arr</span><span class=\\"token punctuation\\">[</span><span class=\\"token variable\\">$i</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">??</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$n</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token variable\\">$m</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n              <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$n</span> <span class=\\"token operator\\">&lt;</span> <span class=\\"token variable\\">$m</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n              <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);export{k as comp,v as data};
