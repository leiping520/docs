import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as l,e as i}from"./app-BRRFUwCK.js";const a={},r=i(`<h1 id="操作容器" tabindex="-1"><a class="header-anchor" href="#操作容器"><span>操作容器</span></a></h1><h2 id="_1-操作-docker-容器" tabindex="-1"><a class="header-anchor" href="#_1-操作-docker-容器"><span>1.操作 Docker 容器</span></a></h2><ul><li><p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p></li><li><p>本章将具体介绍如何来管理一个容器，包括创建、启动和停止等</p></li></ul><h2 id="_2-启动容器" tabindex="-1"><a class="header-anchor" href="#_2-启动容器"><span>2.启动容器</span></a></h2><ul><li>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。</li></ul><p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><h3 id="新建并启动" tabindex="-1"><a class="header-anchor" href="#新建并启动"><span><strong>新建并启动</strong></span></a></h3><p>所需要的命令主要为 docker run。</p><p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code>$ docker run ubuntu:18.04 /bin/echo &#39;Hello world&#39;
Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[r];function d(t,o){return n(),l("div",null,c)}const h=e(a,[["render",d],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/docker/container/","title":"操作容器","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1.操作 Docker 容器","slug":"_1-操作-docker-容器","link":"#_1-操作-docker-容器","children":[]},{"level":2,"title":"2.启动容器","slug":"_2-启动容器","link":"#_2-启动容器","children":[{"level":3,"title":"新建并启动","slug":"新建并启动","link":"#新建并启动","children":[]}]}],"git":{"createdTime":1728834120000,"updatedTime":1728834120000,"contributors":[{"name":"leiping","email":"leiping@91cyt.com","commits":1}]},"readingTime":{"minutes":0.79,"words":236},"filePathRelative":"docker/container/README.md","localizedDate":"October 13, 2024","excerpt":"\\n<h2>1.操作 Docker 容器</h2>\\n<ul>\\n<li>\\n<p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p>\\n</li>\\n<li>\\n<p>本章将具体介绍如何来管理一个容器，包括创建、启动和停止等</p>\\n</li>\\n</ul>\\n<h2>2.启动容器</h2>\\n<ul>\\n<li>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。</li>\\n</ul>\\n<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>"}');export{h as comp,u as data};
