import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-DP7fMGej.js";const t={},o=e(`<div class="hint-container note"><p class="hint-container-title">Note</p><p>本章是 <code>TypeScript</code> 类型系统的总体介绍 <code>TypeScript</code> 继承了 <code>JavaScript</code> 的类型，在这个基础上，定义了一套自己的类型系统。</p></div><ul><li>1.<a href="#basic">基本类型</a><ul><li>1.1 <a href="#union">概述</a></li><li>1.2 <a href="#boolean">boolean 类型</a></li><li>1.3 <a href="#string">string 类型</a></li><li>1.4 <a href="#number">number 类型</a></li><li>1.5 <a href="#bigint">bigint 类型</a></li><li>1.6 <a href="#symbol">symbol 类型</a></li><li>1.7 <a href="#object">object 类型</a></li><li>1.8 <a href="#not-defined">undefined 类型，null 类型</a></li></ul></li><li>2.<a href="#wrap">包装对象 类型</a><ul><li>2.1 <a href="#wrap-1">包装对象的概念</a></li><li>2.2 <a href="#warp-2">包装对象类型与字面量类型</a></li></ul></li><li>3.<a href="#obj">Object 类型与 object 类型</a><ul><li>3.1 <a href="#obj-1">Object 类型</a></li><li>3.2 <a href="#obj-2">object 类型</a></li></ul></li><li>4.<a href="#special">undefined 和 null 的特殊性</a></li><li>5.<a href="#tuple">值类型</a></li><li>6.<a href="#union">联合类型</a></li><li>7.<a href="#guard">交叉类型</a></li><li>8.<a href="#type">type 命令</a></li><li>9.<a href="#typeof">typeof 运算符</a></li><li>10.<a href="#block">块级类型声明</a></li><li>11.<a href="#compatibility">类型的兼容</a></li></ul><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型<a id="basic"></a></span></a></h3><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述<a id="union"></a></span></a></h4><p><code>JavaScript</code> 语言（注意，不是 <code>TypeScript</code>）将值分成8种类型。</p><ul><li>boolean</li><li>string</li><li>number</li><li>bigint</li><li>symbol</li><li>object</li><li>undefined</li><li>null</li></ul><p><code>TypeScript</code> 继承了 <code>JavaScript</code> 的类型设计，以上8种类型可以看作 <code>TypeScript</code> 的基本类型。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>上面所有类型的名称都是小写字母，首字母大写的<code>Number</code>、<code>String</code>、<code>Boolean</code>等在 <code>JavaScript</code> 语言中都是内置对象，而不是类型名称。<br> 另外，<code>undefined</code> 和 <code>null</code> 既可以作为值，也可以作为类型，取决于在哪里使用它们。</p></div><p>这8种基本类型是 <code>TypeScript</code> 类型系统的基础，复杂类型由它们组合而成。</p><p>以下是它们的简单介绍。</p><h4 id="boolean-类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型"><span>boolean 类型<a id="boolean"></a></span></a></h4><p><code>boolean</code> 类型只包含 <code>true</code> 或 <code>false</code> 两个布尔值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-类型" tabindex="-1"><a class="header-anchor" href="#string-类型"><span>string 类型<a id="string"></a></span></a></h4><p><code>string</code> 类型包含所有 <code>JavaScript</code> 字符串。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> world</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，普通字符串和模板字符串都属于 <code>string</code> 类型。</p><h4 id="number-类型" tabindex="-1"><a class="header-anchor" href="#number-类型"><span>number 类型<a id="number"></a></span></a></h4><p><code>number</code> 类型包含整数和浮点数。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1.1435926</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> z<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，整数、浮点数和非十进制数都属于 <code>number</code> 类型。</p><h4 id="bigint-类型" tabindex="-1"><a class="header-anchor" href="#bigint-类型"><span>bigint 类型<a id="bigint"></a></span></a></h4><p><code>bigint</code> 类型包含所有的大整数。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span>bigint <span class="token operator">=</span> <span class="token number">123n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y<span class="token operator">:</span>bigint <span class="token operator">=</span> <span class="token number">0x12345678901234567890n</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，都属于 <code>bigint</code> 类型。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p><code>bigint</code> 类型是 <code>TypeScript</code> 4.0 版本新增的类型，目前 <code>TypeScript</code> 4.0 是 <code>TypeScript</code> 最新的稳定版本。<br><code>bigint</code> 与 <code>number</code> 类型不兼容。<br><code>bigint</code> 类型是 <code>ES2020</code> 标准引入的。如果使用这个类型，<code>TypyScript</code> 编译的目标 <code>JavaScript</code> 版本不能低于 <code>ES2020</code> (既编译参数 <code>target</code> 不低于 <code>es2020</code>)</p></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span>bigint <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
<span class="token keyword">const</span> y<span class="token operator">:</span>bigint <span class="token operator">=</span> <span class="token number">123.123</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>bigint</code> 类型赋值为整数和小数，都会报错。</p><h4 id="symbol-类型" tabindex="-1"><a class="header-anchor" href="#symbol-类型"><span>symbol 类型<a id="symbol"></a></span></a></h4><p><code>symbol</code> 类型包含所有 <code>Symbol</code> 值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span><span class="token builtin">symbol</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，<code>Symbol()</code> 函数的返回值就是 <code>symbol</code> 类型。</p><h4 id="object-类型" tabindex="-1"><a class="header-anchor" href="#object-类型"><span>object 类型<a id="object"></a></span></a></h4><p>根据 <code>JavaScript</code> 的设计，<code>object</code> 类型包含了所有对象、数组和函数。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span>object <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y<span class="token operator">:</span>object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> z<span class="token operator">:</span><span class="token function-variable function">object</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，对象、数组、函数都属于 <code>object</code> 类型。</p><h4 id="undefined-类型-null类型" tabindex="-1"><a class="header-anchor" href="#undefined-类型-null类型"><span>undefined 类型，null类型<a id="undefined"></a></span></a></h4><p><code>undefined</code> 类型只包含一个值 <code>undefined</code>，表示未定义（既还未给出定义，以后可能会有定义）。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，变量 <code>x</code> 就属于 <code>undefined</code> 类型。两个 <code>undefined</code> 里面，第一个是类型，第二个是值。</p><p><code>null</code> 类型只包含一个值 <code>null</code>，表示空值（既此处没有值）。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x<span class="token operator">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，变量 <code>x</code> 就属于 <code>null</code> 类型。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>如果没有声明类型的变量，被赋值为 <code>undefied</code> 或 <code>null</code>，在关闭编译设置 <code>noImplicitAny</code> 和 <code>strictNullChecks</code> 时，它们的类型会被推断为 <code>any</code>。</p></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 关闭编译设置 noImplicitAny 和 strictNullChecks</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// any</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// any </span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望避免这种情况，则需要打开编译选项 <code>strictNullChecks</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 打开编译设置 strictNullChecks</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，代开编译设置 <code>strictNullChecks</code> 后，未声明类型的变量，被赋值为 <code>undefied</code> 或 <code>null</code>，它们的类型会推断为 <code>undefined</code> 或 <code>null</code>。</p><h3 id="包装对象类型" tabindex="-1"><a class="header-anchor" href="#包装对象类型"><span>包装对象类型<a id="wrap"></a></span></a></h3><h4 id="包装对象的概念" tabindex="-1"><a class="header-anchor" href="#包装对象的概念"><span>包装对象的概念<a id="wrap-1"></a></span></a></h4><h3 id="object-类型与-object-类型" tabindex="-1"><a class="header-anchor" href="#object-类型与-object-类型"><span>Object 类型与 object 类型<a id="obj"></a></span></a></h3><p><code>TypeScript</code> 的对象类型也有大写 <code>Object</code> 和 小写 <code>object</code> 两种。</p><p>大写的 <code>Object</code> 类型代表 <code>javascript</code> 语言里面的广义对象。所有可以转成对象的值，都是 <code>Object</code> 类型，这囊括了几乎所有的值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span>Object<span class="token punctuation">;</span>

obj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，原始类型值、对象、数组、函数都是合发的 <code>Object</code> 类型。</p><p>事实上，除了 <code>undefined</code> 和 <code>null</code> 这两个值不能转为对象，其他任何值都可以赋值给 <code>Object</code> 类型。</p>`,56),p=[o];function c(i,l){return a(),s("div",null,p)}const u=n(t,[["render",c],["__file","types.html.vue"]]),k=JSON.parse('{"path":"/frontend/typescript/types.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":3,"title":"包装对象类型","slug":"包装对象类型","link":"#包装对象类型","children":[]},{"level":3,"title":"Object 类型与 object 类型","slug":"object-类型与-object-类型","link":"#object-类型与-object-类型","children":[]}],"git":{"createdTime":1710495124000,"updatedTime":1710495124000,"contributors":[{"name":"George","email":"leiping@yunxianginvest.com","commits":1}]},"readingTime":{"minutes":4.01,"words":1202},"filePathRelative":"frontend/typescript/types.md","localizedDate":"March 15, 2024","excerpt":"<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">Note</p>\\n<p>本章是 <code>TypeScript</code> 类型系统的总体介绍\\n<code>TypeScript</code> 继承了 <code>JavaScript</code> 的类型，在这个基础上，定义了一套自己的类型系统。</p>\\n</div>\\n<ul>\\n<li>1.<a href=\\"#basic\\">基本类型</a>\\n<ul>\\n<li>1.1 <a href=\\"#union\\">概述</a></li>\\n<li>1.2 <a href=\\"#boolean\\">boolean 类型</a></li>\\n<li>1.3 <a href=\\"#string\\">string 类型</a></li>\\n<li>1.4 <a href=\\"#number\\">number 类型</a></li>\\n<li>1.5 <a href=\\"#bigint\\">bigint 类型</a></li>\\n<li>1.6 <a href=\\"#symbol\\">symbol 类型</a></li>\\n<li>1.7 <a href=\\"#object\\">object 类型</a></li>\\n<li>1.8 <a href=\\"#not-defined\\">undefined 类型，null 类型</a></li>\\n</ul>\\n</li>\\n<li>2.<a href=\\"#wrap\\">包装对象 类型</a>\\n<ul>\\n<li>2.1 <a href=\\"#wrap-1\\">包装对象的概念</a></li>\\n<li>2.2 <a href=\\"#warp-2\\">包装对象类型与字面量类型</a></li>\\n</ul>\\n</li>\\n<li>3.<a href=\\"#obj\\">Object 类型与 object 类型</a>\\n<ul>\\n<li>3.1 <a href=\\"#obj-1\\">Object 类型</a></li>\\n<li>3.2 <a href=\\"#obj-2\\">object 类型</a></li>\\n</ul>\\n</li>\\n<li>4.<a href=\\"#special\\">undefined 和 null 的特殊性</a></li>\\n<li>5.<a href=\\"#tuple\\">值类型</a></li>\\n<li>6.<a href=\\"#union\\">联合类型</a></li>\\n<li>7.<a href=\\"#guard\\">交叉类型</a></li>\\n<li>8.<a href=\\"#type\\">type 命令</a></li>\\n<li>9.<a href=\\"#typeof\\">typeof 运算符</a></li>\\n<li>10.<a href=\\"#block\\">块级类型声明</a></li>\\n<li>11.<a href=\\"#compatibility\\">类型的兼容</a></li>\\n</ul>"}');export{u as comp,k as data};
