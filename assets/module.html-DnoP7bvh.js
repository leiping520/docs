import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-B5VpVzJG.js";const t={},p=e(`<ul><li>1.<a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li>2.<a href="#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F">严格模式</a></li><li>3.<a href="#export">export 命令</a></li><li>4.<a href="#import">import 命令</a></li><li>5.<a href="#%E6%A8%A1%E5%9D%97%E7%9A%84%E6%95%B4%E4%BD%93%E5%8A%A0%E8%BD%BD">模块的整体加载</a></li><li>6.<a href="#export-default">export default 命令</a></li><li>7.<a href="#export-import">export 与 import 的复合写法</a></li><li>8.<a href="#%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%A7%E6%89%BF">模块的继承</a></li><li>9.<a href="#%E8%B7%A8%E6%A8%A1%E5%9D%97%E5%B8%B8%E9%87%8F">跨模块常量</a></li><li>10.<a href="#import-1">import()</a><ul><li>10.1 <a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li>10.2 <a href="#%E9%80%82%E5%90%88%E5%9C%BA%E5%90%88">适合场合</a></li><li>10.3 <a href="#%E6%B3%A8%E6%84%8F%E7%82%B9">注意点</a></li></ul></li><li>11.<a href="#import-meta">import.meta</a></li></ul><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述<a id="概述"></a></span></a></h3><h3 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式<a id="严格模式"></a></span></a></h3><h3 id="模块的整体加载" tabindex="-1"><a class="header-anchor" href="#模块的整体加载"><span>模块的整体加载<a id="模块的整体加载"></a></span></a></h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面。</p><p>下面是一个 <code>circle.js</code> 文件，它输出两个方法 <code>area</code> 和 <code>circumference</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// circle.js</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，加载这个模块。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> area<span class="token punctuation">,</span> circumference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./circle&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆面积：&#39;</span> <span class="token operator">+</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆周长：&#39;</span> <span class="token operator">+</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面写法是逐一指定要加载的方法，整体加载的写法如下。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> circle <span class="token keyword">from</span> <span class="token string">&#39;./circle&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆面积：&#39;</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆周长：&#39;</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">circumference</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，模块整体加载所在的那个对象（上例是 <code>circle</code>），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> circle <span class="token keyword">from</span> <span class="token string">&#39;./circle&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 下面两行都是不允许的</span>
circle<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
circle<span class="token punctuation">.</span><span class="token function-variable function">area</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="export-default-命令" tabindex="-1"><a class="header-anchor" href="#export-default-命令"><span>export default 命令<a id="export-default"></a></span></a></h3><p>从前面的例子可以看出，使用 <code>import</code> 命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到 <code>export default</code> 命令，为模块指定默认输出。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// export-default.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码是一个模块文件 <code>export-default.js</code>，它的默认输出是一个函数。</p><p>其他模块加载该模块时，<code>import</code> 命令可以为该匿名函数指定任意名字。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// import-default.js</span>

<span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">&#39;./export-default&#39;</span><span class="token punctuation">;</span>
<span class="token function">customName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的 <code>import</code> 命令，可以用任意名称指向 <code>export-default.js</code> 输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时 <code>import</code> 命令后面，不使用大括号。</p><p><code>export default</code> 命令用在非匿名函数前，也是可以的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// export-default.js</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者写成</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>foo</code> 函数的函数名 <code>foo</code>，在模块外部是无效的。加载的时候，视同匿名函数加载。</p><p>下面比较一下默认输出和正常输出。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一组</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 输出</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> crc32 <span class="token keyword">from</span> <span class="token string">&#39;crc32&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 输入</span>

<span class="token comment">// 第二组</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 输出</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>crc32<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crc32&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 输入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","module.html.vue"]]),k=JSON.parse('{"path":"/frontend/es6/module.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]},{"level":3,"title":"模块的整体加载","slug":"模块的整体加载","link":"#模块的整体加载","children":[]},{"level":3,"title":"export default 命令","slug":"export-default-命令","link":"#export-default-命令","children":[]}],"git":{"createdTime":1710751437000,"updatedTime":1710751437000,"contributors":[{"name":"George","email":"leiping@yunxianginvest.com","commits":1}]},"readingTime":{"minutes":2.51,"words":752},"filePathRelative":"frontend/es6/module.md","localizedDate":"March 18, 2024","excerpt":"<ul>\\n<li>1.<a href=\\"#%E6%A6%82%E8%BF%B0\\">概述</a></li>\\n<li>2.<a href=\\"#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\\">严格模式</a></li>\\n<li>3.<a href=\\"#export\\">export 命令</a></li>\\n<li>4.<a href=\\"#import\\">import 命令</a></li>\\n<li>5.<a href=\\"#%E6%A8%A1%E5%9D%97%E7%9A%84%E6%95%B4%E4%BD%93%E5%8A%A0%E8%BD%BD\\">模块的整体加载</a></li>\\n<li>6.<a href=\\"#export-default\\">export default 命令</a></li>\\n<li>7.<a href=\\"#export-import\\">export 与 import 的复合写法</a></li>\\n<li>8.<a href=\\"#%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%A7%E6%89%BF\\">模块的继承</a></li>\\n<li>9.<a href=\\"#%E8%B7%A8%E6%A8%A1%E5%9D%97%E5%B8%B8%E9%87%8F\\">跨模块常量</a></li>\\n<li>10.<a href=\\"#import-1\\">import()</a>\\n<ul>\\n<li>10.1 <a href=\\"#%E7%AE%80%E4%BB%8B\\">简介</a></li>\\n<li>10.2 <a href=\\"#%E9%80%82%E5%90%88%E5%9C%BA%E5%90%88\\">适合场合</a></li>\\n<li>10.3 <a href=\\"#%E6%B3%A8%E6%84%8F%E7%82%B9\\">注意点</a></li>\\n</ul>\\n</li>\\n<li>11.<a href=\\"#import-meta\\">import.meta</a></li>\\n</ul>"}');export{d as comp,k as data};
