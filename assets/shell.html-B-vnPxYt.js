import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,e as a}from"./app-Cm7Y0yTG.js";const o={},c=a(`<p>格式：SHELL [&quot;executable&quot;, &quot;parameters&quot;]</p><p><code>SHELL</code> 指令可以指定 <code>RUN</code> <code>ENTRYPOINT</code> <code>CMD</code> 指令的 <code>shell</code>，<code>Linux</code> 中默认为 <code>[&quot;/bin/sh&quot;, &quot;-c&quot;]</code></p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">RUN</span> lll ; ls</span>

<span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-cex&quot;</span>]</span>

<span class="token instruction"><span class="token keyword">RUN</span> lll ; ls</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个 <code>RUN</code> 运行同一命令，第二个 <code>RUN</code> 运行的命令会打印出每条命令并当遇到错误时退出。</p><p>当 <code>ENTRYPOINT</code> <code>CMD</code> 以 <code>shell</code> 格式指定时，<code>SHELL</code> 指令所指定的 <code>shell</code> 也会成为这两个指令的 <code>shell</code></p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-cex&quot;</span>]</span>

<span class="token comment"># /bin/sh -cex &quot;nginx&quot;</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> nginx</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-cex&quot;</span>]</span>

<span class="token comment"># /bin/sh -cex &quot;nginx&quot;</span>
<span class="token instruction"><span class="token keyword">CMD</span> nginx</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),t=[c];function d(i,l){return n(),e("div",null,t)}const u=s(o,[["render",d],["__file","shell.html.vue"]]),k=JSON.parse('{"path":"/docker/dockfile/shell.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":1709890332000,"updatedTime":1709890332000,"contributors":[{"name":"George","email":"leiping@yunxianginvest.com","commits":1}]},"readingTime":{"minutes":0.4,"words":121},"filePathRelative":"docker/dockfile/shell.md","localizedDate":"March 8, 2024","excerpt":"<p>格式：SHELL [\\"executable\\", \\"parameters\\"]</p>\\n<p><code>SHELL</code> 指令可以指定 <code>RUN</code> <code>ENTRYPOINT</code> <code>CMD</code> 指令的 <code>shell</code>，<code>Linux</code> 中默认为 <code>[\\"/bin/sh\\", \\"-c\\"]</code></p>\\n<div class=\\"language-docker\\" data-ext=\\"docker\\" data-title=\\"docker\\"><pre class=\\"language-docker\\"><code><span class=\\"token instruction\\"><span class=\\"token keyword\\">SHELL</span> [<span class=\\"token string\\">\\"/bin/sh\\"</span>, <span class=\\"token string\\">\\"-c\\"</span>]</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> lll ; ls</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">SHELL</span> [<span class=\\"token string\\">\\"/bin/sh\\"</span>, <span class=\\"token string\\">\\"-cex\\"</span>]</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> lll ; ls</span>\\n\\n</code></pre></div>"}');export{u as comp,k as data};
